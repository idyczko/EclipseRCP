package com.starterkit.scheduler;

import org.eclipse.jface.databinding.viewers.ObservableListContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

public class Archive extends ViewPart {
	public static final String ID = "com.starterkit.scheduler.archiveview";
	private Task selectedTask;
	private DataModel model = DataModel.getInstance();
	private TableViewer viewer;
	private Label lblNewLabel;

	public Archive() {
	}

	public void createPartControl(Composite parent) {
		parent.setLayout(null);
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL
				| SWT.V_SCROLL);
		Table table = viewer.getTable();
		table.setBounds(0, 0, 297, 469);

		createColumns();

		lblNewLabel = new Label(parent, SWT.WRAP);
		lblNewLabel.setBounds(303, 10, 156, 270);
		lblNewLabel.setText("No selected task");

		viewer.setContentProvider(new ObservableListContentProvider());

		viewer.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				IStructuredSelection selection = (IStructuredSelection) viewer
						.getSelection();
				Object firstElement = selection.getFirstElement();
				selectedTask = (Task) firstElement;
				if (selectedTask != null) {
					lblNewLabel.setText(selectedTask.getDescription());
				}
			}
		});

		viewer.setInput(model.getArchivedTasks());

		initializeButtons(parent);
	}

	private void createColumns() {
		TableViewerColumn headerColumn = new TableViewerColumn(viewer, SWT.NONE);
		headerColumn.getColumn().setWidth(150);
		headerColumn.getColumn().setText("New Column");
		headerColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				Task task = (Task) element;
				return task.getHeader();
			}

			public Image getImage(Object obj) {
				return PlatformUI.getWorkbench().getSharedImages()
						.getImage(ISharedImages.IMG_ETOOL_HOME_NAV);
			}
		});

		TableViewerColumn placeColumn = new TableViewerColumn(viewer, SWT.NONE);
		placeColumn.getColumn().setWidth(100);
		placeColumn.getColumn().setText("New Column");
		placeColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				Task task = (Task) element;
				return task.getPlace();
			}
		});

		TableViewerColumn priorityColumn = new TableViewerColumn(viewer,
				SWT.NONE);
		priorityColumn.getColumn().setWidth(47);
		priorityColumn.getColumn().setText("New Column");
		priorityColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				Task task = (Task) element;
				return task.getPriority().toString();
			}
		});
	}

	private void initializeButtons(Composite parent) {
		Button delete = new Button(parent, SWT.PUSH);
		delete.setBounds(303, 349, 156, 57);
		delete.setText("Do it today");
		delete.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				doItToday(selectedTask);
			}
		});

		Button btnRemoveTask = new Button(parent, SWT.NONE);
		btnRemoveTask.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				deleteTask(selectedTask);
			}
		});
		btnRemoveTask.setBounds(303, 412, 156, 57);
		btnRemoveTask.setText("Delete");
	}

	private void deleteTask(Task task) {
		if (task != null) {
			model.getArchivedTasks().remove(task);
			lblNewLabel.setText("No selected task");
		}
	}

	private void doItToday(Task task) {
		if (task != null) {
			model.getArchivedTasks().remove(task);
			model.getTodayTasks().add(task);
			lblNewLabel.setText("No selected task");
		}
	}

	@Override
	public void setFocus() {

	}

}
