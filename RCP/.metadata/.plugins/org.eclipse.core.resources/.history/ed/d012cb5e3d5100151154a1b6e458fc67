package com.starterkit.scheduler;

import java.util.ArrayList;

import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.viewers.ObservableListContentProvider;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

public class Tomorrow extends ViewPart {

	private ArrayList<Task> tasks = new ArrayList<Task>();
	private WritableList input;
	public static final String ID = "com.starterkit.scheduler.tomorrowview";
	
	public Tomorrow() {

	}

	private TableViewer viewer;

	class ViewContentProvider implements IStructuredContentProvider {
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}

		public void dispose() {
		}

		public Object[] getElements(Object parent) {
			if (parent instanceof Object[]) {
				return (Object[]) parent;
			}
	        return new Object[0];
		}
	}

	class ViewLabelProvider extends LabelProvider implements
			ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return getText(obj);
		}

		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}

		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().getSharedImages().getImage(
					ISharedImages.IMG_OBJ_ELEMENT);
		}
	}

	public void createPartControl(Composite parent) {
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL
				| SWT.V_SCROLL);
		//viewer.setContentProvider(new ViewContentProvider());
		viewer.setLabelProvider(new ViewLabelProvider());
		// Provide the input to the ContentProvider
		Task task = new Task(null, null, null, "dasdasda", "dasdasda", "dasdasda");
		tasks.add(task);
		tasks.add(task);
		tasks.add(task);
		ObservableListContentProvider contentProvider = new ObservableListContentProvider();
	    viewer.setContentProvider(contentProvider);

	    input = new WritableList(tasks, Task.class);
	    // set the writeableList as input for the viewer
	    viewer.setInput(input);

		//input.remove(0);
	}

	public ArrayList<Task> getTasks() {
		return tasks;
	}

	public void setFocus() {
		viewer.getControl().setFocus();
	}

}
